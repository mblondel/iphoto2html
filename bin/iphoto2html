#!/usr/bin/env python

import os
import urllib

from iphoto2html import get_data_dir
from iphoto2html.iphotodata import get_iphoto_data


HEADER = """
<!DOCTYPE HTML PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
    <head>
        <title>iPhoto gallery</title>
        <meta http-equiv="Content-type" content="text/html; charset=utf-8" />
        <link rel="stylesheet" href="style.css" type="text/css" media="screen">
    </head>
    <body>
"""

FOOTER = """
    </body>
</html>
"""


def group(it, size):
    gr = []
    for ele in it:
        gr.append(ele)
        if len(gr) == size:
            yield gr
            gr = []
    if len(gr) != 0:
        yield gr


def gen_album_thumbnail(data, out, albumid):
    album = data.albums[albumid]
    images = [img for img in album.images if not img.ishidden()]
    albumid = album.albumid.encode("utf8")
    name = album.name.encode("utf8")

    if len(images) > 0:
        img = images[0]
        thumbpath = img.thumbpath.encode("utf8")
        thumbpath = "../" + thumbpath[thumbpath.index("Thumbnails"):]
        thumbpath = urllib.quote(thumbpath)
        out.write("%s<br /><a href='album_%s.html'><img src='%s' "
                  "class='thumbnail'></a>\n" % (name, albumid, thumbpath))
    else:
        out.write("<a href='album_%s.html'>%s</a>\n" % \
                  (albumid, name))


def get_thumbpath(img):
    thumbpath = img.thumbpath.encode("utf8")
    thumbpath = "../" + thumbpath[thumbpath.index("Thumbnails"):]
    thumbpath = urllib.quote(thumbpath)
    return thumbpath


def get_imgpath(img):
    imgpath = img.getimagepath().encode("utf8")
    try:
        imgpath = "../" + imgpath[imgpath.index("Masters"):]
    except:
        imgpath = "../" + imgpath[imgpath.index("Previews"):]
    imgpath = urllib.quote(imgpath)
    return imgpath


def gen_page(data, outdir, albumid, imgid, img, n_images):
    out = os.path.join(outdir, "page_%s_%d.html" % (albumid, imgid))
    out = file(out, "w")
    out.write(HEADER)


    thumbpath = get_thumbpath(img)
    imgpath = get_imgpath(img)

    out.write("<center>\n")
 
    if img.ismovie():
        out.write("<img src='camera-video-small.png' /><br />"
                  "<a href='%s'><img src='%s' /></a>" % (imgpath, thumbpath))

    elif opts.imagephp:
        out.write("<a href='%s'><img src='image.php?filename=%s' /></a>\n" % \
                          (imgpath, imgpath))
    else:
        out.write("<a href='%s'><img src='%s' height='700' /></a>\n" % \
                          (imgpath, imgpath))
    out.write("</center>\n")

    out.write("<p align='center'>")

    if imgid != 1:
        out.write("<a href='page_%s_%d.html'><img src='go-previous-small.png' "
                  "/></a>&nbsp;&nbsp;\n" % (albumid, imgid - 1))
    else:
        out.write("<img src='blank.png' />&nbsp;&nbsp;\n")

    out.write("<a href='album_%s.html'><img src='folder-open-small.png' "
              "/></a>&nbsp;&nbsp;\n" % albumid)

    if imgid != n_images:
        out.write("<a href='page_%s_%d.html'><img src='go-next-small.png' "
                  "/></a>\n" % (albumid, imgid + 1))
    else:
        out.write("<img src='blank.png' />&nbsp;&nbsp;\n")

    out.write("</p>")

    out.write(FOOTER)


def gen_home_button(out):
    out.write("<p align='right'><a href='index.html'>"
              "<img src='go-home-small.png' /></a></p>\n")


def gen_album(data, outdir, albumid, opts):
    albumid_utf8 = albumid.encode("utf8")
    out = os.path.join(outdir, "album_%s.html" % albumid_utf8)
    out = file(out, "w")

    album = data.albums[albumid]
    name = album.name.encode("utf8")

    out.write(HEADER)
    out.write("<h2>%s</h2>\n" % name)
    gen_home_button(out)
    out.write("<table>\n")

    images = [img for img in album.images if not img.ishidden()]
    images.sort(lambda x,y: cmp(x.date, y.date))

    imgid = 1
    for line in group(images, 3):
        out.write("<tr>\n")

        for img in line:
            thumbpath = get_thumbpath(img)
            imgpath = get_imgpath(img)

            caption = ""

            gen_page(data, outdir, albumid_utf8, imgid, img, len(images))

            if img.ismovie():
                caption += "&nbsp;<img src='camera-video-small.png' />"
                out.write("<td>%s<br /><a href='%s'><img src='%s' /></a>"
                          "</td>" % (caption, imgpath, thumbpath))
 
            else:
                out.write("<td>%s<br /><a href='page_%s_%d.html'><img src='%s' "
                          "class='thumbnail' /></a></td>\n" % \
                          (caption, albumid_utf8, imgid, thumbpath))

            imgid += 1

        out.write("</tr>\n")

    out.write("</table>\n")
    gen_home_button(out)
    out.write(FOOTER) 


def gen_index(data, out, albumtype):
    albums = [a for a in data.albums.values() if a.albumtype == albumtype]
    albums = [a for a in albums if not a.ishidden()]
    albums.sort(lambda x,y: cmp(x.date, y.date), reverse=True)

    out.write("<table>\n")

    for line in group(albums, 3):
        out.write("<tr>\n")

        for album in line:
            out.write("<td>")
            gen_album_thumbnail(data, out, album.albumid)
            out.write("</td>")

        out.write("</tr>\n")

    out.write("</table>\n")


def gen_all(data, outdir, opts):
    out = os.path.join(outdir, "index.html")
    out = file(out, "w")
    out.write(HEADER)

    out.write("<h2>Albums</h2>\n")
    gen_index(data, out, "Regular")

    out.write("<h2>Events</h2>\n")
    gen_index(data, out, "Event")


    for albumid, album in data.albums.items():
        gen_album(data, outdir, album.albumid, opts)

        #print album.albumid
        #print album.albumtype
        #print album.parent.name
        #print album.parent.albumid

    out.write(FOOTER)


if __name__ == '__main__':
    import shutil
    from optparse import OptionParser
    import glob

    op = OptionParser()
    op.add_option("--imagephp", action="store_true", dest="imagephp")
    (opts, args) = op.parse_args()

    photolib = os.path.join(args[0], "AlbumData.xml")
    out = os.path.join(args[0], "html")

    data = get_iphoto_data(photolib)

    if not os.path.exists(out):
        os.makedirs(out)

    gen_all(data, out, opts)

    datadir = get_data_dir()

    shutil.copyfile(os.path.join(datadir, "style.css"),
                    os.path.join(out, "style.css"))

    for png in glob.glob(os.path.join(datadir, "*.png")):
        png_base = os.path.basename(png)
        shutil.copyfile(png, os.path.join(out, png_base))

    if opts.imagephp:
        shutil.copyfile(os.path.join(datadir, "image.php"),
                        os.path.join(out, "image.php"))
